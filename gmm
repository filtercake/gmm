#!/usr/bin/env bash
MODULES_HOME=${MODULES_HOME:-$HOME/.modules}
MODULES_LOCAL=${MODULES_LOCAL:-modules}
SEARCH_API=${SEARCH_API:-api.github.com}

UI_GRAY="\033[1;37m"
UI_BLUE="\033[1;34m"
UI_DARKGRAY="\033[90m"
UI_RED="\033[0;31m"
UI_GREEN="\033[0;32m"
UI_YELLOW="\033[1;33m"
UI_WHITE="\033[1;37m"
UI_NONE="\033[0m"

function ok {
  printf "${UI_NONE}[${UI_GREEN}  OK  ${UI_NONE}] $@\r\n"
}

function info {
  printf "${UI_NONE}[${UI_BLUE} INFO ${UI_NONE}] $@\n"
}

function fail {
  printf "${UI_NONE}[${UI_RED} FAIL ${UI_NONE}] $@\n"
}

function assert {
  if [ $? -gt 1 ]; then
    fail "$@"
    exit 1
  elif [ $? -eq 1 ]; then
    ok "$@"
  fi
}

function ex {
  if [ -n "$VERBOSE" ]; then
    "$@"
  else
    "$@" >> $LOG 2>&1
  fi

}

function ensure_home {
  stat $MODULES_HOME &>/dev/null
  if [ $? -gt 0 ]; then
    mkdir $MODULES_HOME
    assert "initialized ${MODULES_HOME}"
  fi
}

function ensure_repo {
  git status &>/dev/null
  if test $? -eq 128; then
    ex git init
    assert "initialized as git repo"
  fi
}

function require {
  local installer="brew"
  local instruction="try running"

  if [ `uname` = "Linux" ]; then
    installer="apt-get"
    priv="try running sudo"
  fi

  for var in "$@"; do
    local bin=`which $var`
    if [ -z $bin ]; then
      fail "$instruction \"$installer install $var\"."
      exit 1
    fi
  done
}

urlencode() {
  local string="${1}"
  local strlen=${#string}
  local encoded=""
  local pos c o

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [^+#[:space:]] ) o="${c}" ;;
        * )               printf -v o '%%%02x' "'$c"
     esac
     encoded+="${o}"
  done
  echo "${encoded}"
  REPLY="${encoded}"
}

require "git" "jq"
ensure_home

declare -x LOG="$PWD/gmm-debug.log"
declare -x VERSION="1.1.0"

function help {
cat <<- EOF

  git module manager v${VERSION}

  $(printf "usage: ${UI_WHITE}gmm${UI_NONE} <${UI_WHITE}command${UI_NONE}> [options]")

  commands:
    i, install [-v] <user/repo> [branch]   install modules
    u, uninstall <user/repo>               uninstall modules
    ls [cache]                             list installed or cached packages
    cache <update|clean>                   do stuff with the cache
    search "term" [language]               search for stuff

  options:
    --help, -h              show this help information
    --version               print the version number
    --update                self update

EOF
}

#
# try to update a submodule
#
function gmm_update {
  ensure_repo

  ex git submodule update --recursive
  assert "submodule updated recursively"
  ok "$1 is up to date"
}

#
# try to list the modules that are installed in this repo
#
function gmm_ls {
  ensure_repo "silent"

  local modules=`git submodule foreach --quiet --recursive \
    'echo $toplevel/$path@$(git symbolic-ref --short HEAD)'`

  local -a modules=($modules)
  local -i count=${#modules[*]}
  local -i lastIndex=$(($count - 1)) index

  if [ $count = 0 ]
    then
    ok "there are no modules, use \"gmm install <user/repo>\" to add one."
    exit 0
  fi

  info "listing (${PWD})\n"

  for ((index=0; index<=lastIndex; index++)); do
    local file=${modules[$index]}
    local location=${file%%"@"*}
    local branch=${file#*"@"}
    local relative=${location/$PWD/}

    info "ðŸ“¦  $(basename $relative)@$branch in .$relative"
  done

  local base=$(basename $PWD)
  printf "\r\n"
  ok "found ${UI_WHITE}$count${UI_NONE} module(s) in ${UI_WHITE}$base${UI_NONE}"
  printf "\r\n"
}

#
# Visit all git repos in the cache, list them
# so that we know what we have on this machine.
#
function gmm_ls_cache {
  ensure_repo
  let refresh=$1
  let counter=0

  function update {
    local d="$1"
    if [ -d "$d" ]; then
      cd $d > /dev/null
      if [ -d ".git" ]; then

        if [ -z $refresh ]; then
          ex git pull --all
          info "ðŸ“¦  $d updated"
        else
          info "ðŸ“¦  $d in ${PWD/$MODULES_HOME}"
        fi
        ((counter++))
      else
        scan *
      fi
      cd .. > /dev/null
    fi
  }

  function scan {
    for x in $*; do
      update "$x"
    done
  }

  info "listing cache (${MODULES_HOME})\n"
  scan $MODULES_HOME
  printf "\n"
  ok "found ${counter} repos"
}

function gmm_search {
  require "curl" "jq"

  IFS=$'\n'
  local query=`urlencode $1`
  local language=`urlencode ${2:-JavaScript}`
  local sort=${3:-stars}

  ok "searching ${SEARCH_API} for '${query}'\n"
  local dest="https://${SEARCH_API}/search/repositories"
  local search="q=${query}+language:${language}&sort=${sort}&order=desc"

  local results=`curl -s "${dest}?${search}" |\
    jq -r '.items[] | .owner.login,\
      .name,\
      if .description == "" then "(no description)" else .description end,\
      .html_url,\
      .watchers'`

  local -a modules=($results)
  local -i count=${#modules[*]}
  local -i lastIndex=$(($count - 1)) index

  for ((index=0; index<=lastIndex; index++)); do

    local owner=${modules[index]}; index=index+1
    local module=${modules[index]}; index=index+1
    local description=${modules[index]}; index=index+1
    local url=${modules[index]}; index=index+1
    local stars=${modules[index]};

    printf "ðŸ“¦  ${UI_BLUE}%s/%s${UI_NONE} - %s\n  ${UI_DARKGRAY} %s â˜… %s ${UI_NONE}\n\n" \
      $owner $module $description $stars $url

  done
}

#
# Check if the repo exists, if it does not, clone it
# if it does exist, just update it and then add it as
# a submodule.
#
function gmm_install {
  ensure_repo

  if test -n "$(git status --porcelain)"; then
    fail "first you need to commit your changes"
    exit 1
  fi

  #
  # ensure that we ignore our log file, if there is no .gitignore
  # or there it doesn't contain the name of our log gile, add it.
  #
  if [ ! -f ".gitignore" ] || [ $(cat .gitignore) != *"gmm-debug.log"* ]; then
    echo "gmm-debug.log" >> ".gitignore"
  fi

  local protocol=${PROTOCOL:-git}
  local host=${HOST:-github.com}
  local branch=${2:-master}
  local dest=$MODULES_LOCAL/$1 #${1#*"/"*}
  local src=$protocol://$host/$1.git

  local oldpwd=$PWD

  if [ ! -d $MODULES_HOME/$1 ]
    then

    ex git clone --depth 1 --recursive $src $MODULES_HOME/$1

    cd $MODULES_HOME/$1

    for remote in `git branch -r `; do
      local br=${remote#* }
      if [ "$br" != "->" ] && [ "$br" != "HEAD" ]; then
        ex git branch --track "$br"
      fi
    done

    cd $oldpwd

    # error code 128 means that we are either offline or the
    # repo cant be found, either way, we should fail and exit.
    if [ $? = 128 ]; then
      fail "not available (offline?)"
    fi

  else
    cd $MODULES_HOME/$1

    ex git pull

    if [ $? -eq 0 ]; then
      info "cache updated"
    else
      info "using cached version"
    fi

    cd $oldpwd
  fi

  ex git config -f .gitmodules submodule.$MODULES_LOCAL/$1.ignore dirty
  assert "ignore changes to module"

  # if we got this far, we can add a submodule out of the cache.
  ex git submodule add -b $branch $MODULES_HOME/$1 $dest
  if [ $? -gt 1 ]; then
    assert "submodule added"
  elif [ $? -eq 1 ]; then
    # the submodule is already in the index, we
    # should try to update it instead of add it
    ex cd $MODULES_LOCAL/$1
    gmm_update $1
    ex cd $oldpwd
  fi

  ex chmod -R a-w $MODULES_LOCAL/$1
  assert "set submodule to read-only"

  ex git add -A .
  ex git commit -am "added git submodule $1"
  assert "committed submodule"
}

#
# Check if the submodule is installed, if it is, remove it
#
function gmm_uninstall {
  ensure_repo

  local dest=$MODULES_LOCAL/$1

  ex git submodule deinit -f $dest
  assert "deinitialized submodule"

  rm -rf .git/$MODULES_LOCAL/$dest
  assert "submodule files removed"

  git submodule update
  assert "submodules updated"

  ok "$dest successfully removed"
}

function update {

  local oldpwd=$PWD
  local source="https://github.com/0x00A/gmm"
  local dest="/usr/local/lib/gmm"

  stat $dest &>/dev/null
  if [ $? -gt 0 ]; then
    git clone $source $dest
    assert "installed"
    cd $dest
    sudo chmod 700 gmm
    assert "permissions updated"
  else
    cd $dest
    ex git pull
    assert "updated"
  fi

  cd $oldpwd
  ok "success"
}

#
# handle arguments parsing
#
while test $# -gt 0; do
  case "$1" in
    cache)
      shift
      if [ "$1" = "update" ]; then
        gmm_ls_cache $1
      fi
      break
      ;;
    search)
      shift
      gmm_search $@
      break
      ;;
    ls)
      shift
      if [ "$1" = "cache" ]; then
        gmm_ls_cache
        exit 0
      fi
      gmm_ls
      break
      ;;
    -h|--help)
      help
      exit 0
      ;;
    i|install)
      shift
      if [ $1 = "-v" ]; then
        shift
        VERBOSE=1
      fi

      if test $# -gt 0; then
        gmm_install $@
      else
        echo "no user/repo specified"
        exit 1
      fi
      break
      ;;
    u|uninstall)
      shift
      if [ $1 = "-v" ]; then
        shift
        VERBOSE=1
      fi

      if test $# -gt 0; then
        gmm_uninstall $@
      else
        echo "no user/repo specified"
        exit 1
      fi
      break
      ;;
    --update)
      update
      break
      ;;
    --version)
      echo $VERSION
      break
      ;;
    *)
     fail "unknown command"
     help
     break
     ;;
  esac
done

# vi: expandtab sw=2 ts=2
